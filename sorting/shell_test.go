// DO NOT EDIT THIS FILE MANUALLY
// Generated by go generate
package sorting

import "testing"

func TestShellUint(t *testing.T) {
	list := []uint{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellUint(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellUint8(t *testing.T) {
	list := []uint8{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellUint8(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint8(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellUint16(t *testing.T) {
	list := []uint16{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellUint16(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint16(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellUint32(t *testing.T) {
	list := []uint32{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellUint32(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint32(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellUint64(t *testing.T) {
	list := []uint64{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellUint64(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint64(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellInt(t *testing.T) {
	list := []int{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellInt(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellInt8(t *testing.T) {
	list := []int8{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellInt8(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int8(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellInt16(t *testing.T) {
	list := []int16{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellInt16(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int16(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellInt32(t *testing.T) {
	list := []int32{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellInt32(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int32(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellInt64(t *testing.T) {
	list := []int64{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellInt64(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int64(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellFloat32(t *testing.T) {
	list := []float32{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellFloat32(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != float32(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellFloat64(t *testing.T) {
	list := []float64{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellFloat64(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != float64(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellByte(t *testing.T) {
	list := []byte{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellByte(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != byte(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellRune(t *testing.T) {
	list := []rune{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellRune(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != rune(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}

func TestShellUintptr(t *testing.T) {
	list := []uintptr{4, 2, 1, 3, 0, 9, 6, 8, 7, 5}
	res := ShellUintptr(list, 0)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uintptr(i) {
			t.Fatalf("Shell algorithm isn't correct: %v\n", res)
		}
	}
}
