// DO NOT EDIT THIS FILE MANUALLY
// Generated by go generate
package sorting

import "testing"

func TestInsertionUint(t *testing.T) {
	list := []uint{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionUint(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionUint8(t *testing.T) {
	list := []uint8{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionUint8(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint8(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionUint16(t *testing.T) {
	list := []uint16{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionUint16(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint16(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionUint32(t *testing.T) {
	list := []uint32{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionUint32(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint32(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionUint64(t *testing.T) {
	list := []uint64{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionUint64(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint64(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionInt(t *testing.T) {
	list := []int{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionInt(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionInt8(t *testing.T) {
	list := []int8{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionInt8(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int8(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionInt16(t *testing.T) {
	list := []int16{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionInt16(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int16(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionInt32(t *testing.T) {
	list := []int32{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionInt32(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int32(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionInt64(t *testing.T) {
	list := []int64{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionInt64(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int64(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionFloat32(t *testing.T) {
	list := []float32{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionFloat32(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != float32(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionFloat64(t *testing.T) {
	list := []float64{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionFloat64(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != float64(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionByte(t *testing.T) {
	list := []byte{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionByte(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != byte(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionRune(t *testing.T) {
	list := []rune{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionRune(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != rune(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestInsertionUintptr(t *testing.T) {
	list := []uintptr{4, 2, 1, 7, 5, 0, 3, 9, 6, 8}
	res := InsertionUintptr(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uintptr(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}
