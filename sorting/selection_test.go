// DO NOT EDIT THIS FILE MANUALLY
// Generated by go generate
package sorting

import "testing"

func TestSelectionUint(t *testing.T) {
	list := []uint{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionUint(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionUint8(t *testing.T) {
	list := []uint8{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionUint8(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint8(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionUint16(t *testing.T) {
	list := []uint16{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionUint16(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint16(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionUint32(t *testing.T) {
	list := []uint32{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionUint32(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint32(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionUint64(t *testing.T) {
	list := []uint64{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionUint64(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uint64(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionInt(t *testing.T) {
	list := []int{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionInt(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionInt8(t *testing.T) {
	list := []int8{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionInt8(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int8(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionInt16(t *testing.T) {
	list := []int16{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionInt16(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int16(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionInt32(t *testing.T) {
	list := []int32{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionInt32(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int32(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionInt64(t *testing.T) {
	list := []int64{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionInt64(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != int64(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionFloat32(t *testing.T) {
	list := []float32{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionFloat32(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != float32(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionFloat64(t *testing.T) {
	list := []float64{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionFloat64(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != float64(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionByte(t *testing.T) {
	list := []byte{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionByte(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != byte(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionRune(t *testing.T) {
	list := []rune{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionRune(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != rune(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}

func TestSelectionUintptr(t *testing.T) {
	list := []uintptr{4, 2, 1, 7, 3, 0, 5, 6}
	res := SelectionUintptr(list)

	if len(res) != len(list) {
		t.Fatalf("Returned list has a different number of items %d!=%d",
			len(list), len(res))
	}

	for i := 0; i < len(list); i++ {
		if res[i] != uintptr(i) {
			t.Fatalf("Insertion algorithm isn't correct: %v\n", res)
		}
	}
}
