// DO NOT EDIT THIS FILE MANUALLY
// Generated by go generate
package search

import (
	"testing"

	"github.com/thehivecorporation/algorithms-in-go/sorting"
)

func TestBinaryUint(t *testing.T) {
	list := []uint{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryUint(list, 2, sorting.BubbleUint)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryUint(list, 33, sorting.HeapUint)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryUint8(t *testing.T) {
	list := []uint8{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryUint8(list, 2, sorting.BubbleUint8)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryUint8(list, 33, sorting.HeapUint8)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryUint16(t *testing.T) {
	list := []uint16{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryUint16(list, 2, sorting.BubbleUint16)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryUint16(list, 33, sorting.HeapUint16)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryUint32(t *testing.T) {
	list := []uint32{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryUint32(list, 2, sorting.BubbleUint32)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryUint32(list, 33, sorting.HeapUint32)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryUint64(t *testing.T) {
	list := []uint64{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryUint64(list, 2, sorting.BubbleUint64)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryUint64(list, 33, sorting.HeapUint64)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryInt(t *testing.T) {
	list := []int{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryInt(list, 2, sorting.BubbleInt)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryInt(list, 33, sorting.HeapInt)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryInt8(t *testing.T) {
	list := []int8{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryInt8(list, 2, sorting.BubbleInt8)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryInt8(list, 33, sorting.HeapInt8)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryInt16(t *testing.T) {
	list := []int16{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryInt16(list, 2, sorting.BubbleInt16)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryInt16(list, 33, sorting.HeapInt16)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryInt32(t *testing.T) {
	list := []int32{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryInt32(list, 2, sorting.BubbleInt32)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryInt32(list, 33, sorting.HeapInt32)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryInt64(t *testing.T) {
	list := []int64{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryInt64(list, 2, sorting.BubbleInt64)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryInt64(list, 33, sorting.HeapInt64)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryFloat32(t *testing.T) {
	list := []float32{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryFloat32(list, 2, sorting.BubbleFloat32)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryFloat32(list, 33, sorting.HeapFloat32)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryFloat64(t *testing.T) {
	list := []float64{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryFloat64(list, 2, sorting.BubbleFloat64)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryFloat64(list, 33, sorting.HeapFloat64)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryByte(t *testing.T) {
	list := []byte{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryByte(list, 2, sorting.BubbleByte)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryByte(list, 33, sorting.HeapByte)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryRune(t *testing.T) {
	list := []rune{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryRune(list, 2, sorting.BubbleRune)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryRune(list, 33, sorting.HeapRune)
	if res {
		t.Error("Value found when it shouldn't")
	}
}

func TestBinaryUintptr(t *testing.T) {
	list := []uintptr{4, 2, 1, 7, 3, 0, 5, 6}

	res := BinaryUintptr(list, 2, sorting.BubbleUintptr)
	if !res {
		t.Error("Value not found when it should")
	}

	res = BinaryUintptr(list, 33, sorting.HeapUintptr)
	if res {
		t.Error("Value found when it shouldn't")
	}
}
