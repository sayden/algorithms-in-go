// DO NOT EDIT THIS FILE MANUALLY
// Generated by go generate
package search

func BinaryUint(u []uint, val uint, sortingAlgorithm func(v []uint) []uint) bool {
	newL := sortingAlgorithm(u)
	return binaryUint(newL, val)
}

func binaryUint(u []uint, val uint) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryUint8(u []uint8, val uint8, sortingAlgorithm func(v []uint8) []uint8) bool {
	newL := sortingAlgorithm(u)
	return binaryUint8(newL, val)
}

func binaryUint8(u []uint8, val uint8) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryUint16(u []uint16, val uint16, sortingAlgorithm func(v []uint16) []uint16) bool {
	newL := sortingAlgorithm(u)
	return binaryUint16(newL, val)
}

func binaryUint16(u []uint16, val uint16) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryUint32(u []uint32, val uint32, sortingAlgorithm func(v []uint32) []uint32) bool {
	newL := sortingAlgorithm(u)
	return binaryUint32(newL, val)
}

func binaryUint32(u []uint32, val uint32) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryUint64(u []uint64, val uint64, sortingAlgorithm func(v []uint64) []uint64) bool {
	newL := sortingAlgorithm(u)
	return binaryUint64(newL, val)
}

func binaryUint64(u []uint64, val uint64) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryInt(u []int, val int, sortingAlgorithm func(v []int) []int) bool {
	newL := sortingAlgorithm(u)
	return binaryInt(newL, val)
}

func binaryInt(u []int, val int) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryInt8(u []int8, val int8, sortingAlgorithm func(v []int8) []int8) bool {
	newL := sortingAlgorithm(u)
	return binaryInt8(newL, val)
}

func binaryInt8(u []int8, val int8) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryInt16(u []int16, val int16, sortingAlgorithm func(v []int16) []int16) bool {
	newL := sortingAlgorithm(u)
	return binaryInt16(newL, val)
}

func binaryInt16(u []int16, val int16) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryInt32(u []int32, val int32, sortingAlgorithm func(v []int32) []int32) bool {
	newL := sortingAlgorithm(u)
	return binaryInt32(newL, val)
}

func binaryInt32(u []int32, val int32) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryInt64(u []int64, val int64, sortingAlgorithm func(v []int64) []int64) bool {
	newL := sortingAlgorithm(u)
	return binaryInt64(newL, val)
}

func binaryInt64(u []int64, val int64) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryFloat32(u []float32, val float32, sortingAlgorithm func(v []float32) []float32) bool {
	newL := sortingAlgorithm(u)
	return binaryFloat32(newL, val)
}

func binaryFloat32(u []float32, val float32) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryFloat64(u []float64, val float64, sortingAlgorithm func(v []float64) []float64) bool {
	newL := sortingAlgorithm(u)
	return binaryFloat64(newL, val)
}

func binaryFloat64(u []float64, val float64) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryByte(u []byte, val byte, sortingAlgorithm func(v []byte) []byte) bool {
	newL := sortingAlgorithm(u)
	return binaryByte(newL, val)
}

func binaryByte(u []byte, val byte) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryRune(u []rune, val rune, sortingAlgorithm func(v []rune) []rune) bool {
	newL := sortingAlgorithm(u)
	return binaryRune(newL, val)
}

func binaryRune(u []rune, val rune) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}

func BinaryUintptr(u []uintptr, val uintptr, sortingAlgorithm func(v []uintptr) []uintptr) bool {
	newL := sortingAlgorithm(u)
	return binaryUintptr(newL, val)
}

func binaryUintptr(u []uintptr, val uintptr) bool {
	low := 0
	high := len(u) - 1

	for low <= high {
		ix := (low + high) / 2
		if val == u[ix] {
			return true
		} else if val < u[ix] {
			high = ix - 1
		} else {
			low = ix + 1
		}
	}

	return false
}
