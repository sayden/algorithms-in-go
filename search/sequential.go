// DO NOT EDIT THIS FILE MANUALLY
// Generated by go generate
package search

func SequentialUint(u []uint, searched uint) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialUint8(u []uint8, searched uint8) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialUint16(u []uint16, searched uint16) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialUint32(u []uint32, searched uint32) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialUint64(u []uint64, searched uint64) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialInt(u []int, searched int) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialInt8(u []int8, searched int8) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialInt16(u []int16, searched int16) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialInt32(u []int32, searched int32) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialInt64(u []int64, searched int64) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialFloat32(u []float32, searched float32) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialFloat64(u []float64, searched float64) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialByte(u []byte, searched byte) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialRune(u []rune, searched rune) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}

func SequentialUintptr(u []uintptr, searched uintptr) bool {
	for _, v := range u {
		if v == searched {
			return true
		}
	}

	return false
}
