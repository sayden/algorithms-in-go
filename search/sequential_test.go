// DO NOT EDIT THIS FILE MANUALLY
// Generated by go generate
package search

import "testing"

func TestSequentialUint(t *testing.T) {
	list := []uint{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialUint(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialUint(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialUint8(t *testing.T) {
	list := []uint8{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialUint8(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialUint8(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialUint16(t *testing.T) {
	list := []uint16{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialUint16(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialUint16(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialUint32(t *testing.T) {
	list := []uint32{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialUint32(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialUint32(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialUint64(t *testing.T) {
	list := []uint64{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialUint64(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialUint64(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialInt(t *testing.T) {
	list := []int{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialInt(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialInt(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialInt8(t *testing.T) {
	list := []int8{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialInt8(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialInt8(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialInt16(t *testing.T) {
	list := []int16{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialInt16(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialInt16(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialInt32(t *testing.T) {
	list := []int32{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialInt32(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialInt32(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialInt64(t *testing.T) {
	list := []int64{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialInt64(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialInt64(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialFloat32(t *testing.T) {
	list := []float32{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialFloat32(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialFloat32(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialFloat64(t *testing.T) {
	list := []float64{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialFloat64(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialFloat64(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialByte(t *testing.T) {
	list := []byte{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialByte(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialByte(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialRune(t *testing.T) {
	list := []rune{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialRune(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialRune(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}

func TestSequentialUintptr(t *testing.T) {
	list := []uintptr{4, 2, 1, 7, 3, 0, 5, 6}
	res := SequentialUintptr(list, 3)
	if !res {
		t.Error("Value that existed wasn't found")
	}

	res = SequentialUintptr(list, 33)
	if res {
		t.Error("Values that didn't exist was found")
	}
}
