// DO NOT EDIT THIS FILE MANUALLY
// Generated by go generate
package common

import "testing"

func TestSwapUint(t *testing.T) {
	ar := []uint{1, 2}

	SwapUint(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapUint8(t *testing.T) {
	ar := []uint8{1, 2}

	SwapUint8(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapUint16(t *testing.T) {
	ar := []uint16{1, 2}

	SwapUint16(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapUint32(t *testing.T) {
	ar := []uint32{1, 2}

	SwapUint32(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapUint64(t *testing.T) {
	ar := []uint64{1, 2}

	SwapUint64(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapInt(t *testing.T) {
	ar := []int{1, 2}

	SwapInt(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapInt8(t *testing.T) {
	ar := []int8{1, 2}

	SwapInt8(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapInt16(t *testing.T) {
	ar := []int16{1, 2}

	SwapInt16(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapInt32(t *testing.T) {
	ar := []int32{1, 2}

	SwapInt32(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapInt64(t *testing.T) {
	ar := []int64{1, 2}

	SwapInt64(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapFloat32(t *testing.T) {
	ar := []float32{1, 2}

	SwapFloat32(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapFloat64(t *testing.T) {
	ar := []float64{1, 2}

	SwapFloat64(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapByte(t *testing.T) {
	ar := []byte{1, 2}

	SwapByte(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapRune(t *testing.T) {
	ar := []rune{1, 2}

	SwapRune(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestSwapUintptr(t *testing.T) {
	ar := []uintptr{1, 2}

	SwapUintptr(ar, 0, 1)
	if ar[0] != 2 || ar[1] != 1 {
		t.Fail()
	}
}

func TestIsLessUint(t *testing.T) {
	if !IsLessUint(1, 2) {
		t.Fail()
	}

	if IsLessUint(2, 1) {
		t.Fail()
	}
}

func TestIsLessUint8(t *testing.T) {
	if !IsLessUint8(1, 2) {
		t.Fail()
	}

	if IsLessUint8(2, 1) {
		t.Fail()
	}
}

func TestIsLessUint16(t *testing.T) {
	if !IsLessUint16(1, 2) {
		t.Fail()
	}

	if IsLessUint16(2, 1) {
		t.Fail()
	}
}

func TestIsLessUint32(t *testing.T) {
	if !IsLessUint32(1, 2) {
		t.Fail()
	}

	if IsLessUint32(2, 1) {
		t.Fail()
	}
}

func TestIsLessUint64(t *testing.T) {
	if !IsLessUint64(1, 2) {
		t.Fail()
	}

	if IsLessUint64(2, 1) {
		t.Fail()
	}
}

func TestIsLessInt(t *testing.T) {
	if !IsLessInt(1, 2) {
		t.Fail()
	}

	if IsLessInt(2, 1) {
		t.Fail()
	}
}

func TestIsLessInt8(t *testing.T) {
	if !IsLessInt8(1, 2) {
		t.Fail()
	}

	if IsLessInt8(2, 1) {
		t.Fail()
	}
}

func TestIsLessInt16(t *testing.T) {
	if !IsLessInt16(1, 2) {
		t.Fail()
	}

	if IsLessInt16(2, 1) {
		t.Fail()
	}
}

func TestIsLessInt32(t *testing.T) {
	if !IsLessInt32(1, 2) {
		t.Fail()
	}

	if IsLessInt32(2, 1) {
		t.Fail()
	}
}

func TestIsLessInt64(t *testing.T) {
	if !IsLessInt64(1, 2) {
		t.Fail()
	}

	if IsLessInt64(2, 1) {
		t.Fail()
	}
}

func TestIsLessFloat32(t *testing.T) {
	if !IsLessFloat32(1, 2) {
		t.Fail()
	}

	if IsLessFloat32(2, 1) {
		t.Fail()
	}
}

func TestIsLessFloat64(t *testing.T) {
	if !IsLessFloat64(1, 2) {
		t.Fail()
	}

	if IsLessFloat64(2, 1) {
		t.Fail()
	}
}

func TestIsLessByte(t *testing.T) {
	if !IsLessByte(1, 2) {
		t.Fail()
	}

	if IsLessByte(2, 1) {
		t.Fail()
	}
}

func TestIsLessRune(t *testing.T) {
	if !IsLessRune(1, 2) {
		t.Fail()
	}

	if IsLessRune(2, 1) {
		t.Fail()
	}
}

func TestIsLessUintptr(t *testing.T) {
	if !IsLessUintptr(1, 2) {
		t.Fail()
	}

	if IsLessUintptr(2, 1) {
		t.Fail()
	}
}
